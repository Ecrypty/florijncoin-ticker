#
user  www-data;
worker_processes  1;

error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" [$uid_got] [$uid_set] [$uid_reset]';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;
    gzip_disable "msie6";

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/ xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

    upstream testnet {
        server 192.168.10.2:19998;
    }

    upstream mainnet {
        server 192.168.10.6:9998;
    }

    server {
        listen       80;
        server_name  _;

        #charset koi8-r;

        access_log  logs/default.access.log  main;
        error_log   logs/default.error.log;

        location / {
            root   html;
        return 444;
            index  index.html index.htm;
        }

       location /hchk {
            root   html;
            return 200;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    server {
        listen       80;
        listen       443 ssl;
        server_name  test.stats.dash.org;

        access_log  logs/dash.access.log  main;
        error_log   logs/dash.error.log;

        userid         on;
        userid_name    uid;
        userid_domain  test.stats.dash.org;
        userid_path    /;
        userid_expires max;
        userid_p3p     'policyref="/w3c/p3p.xml", CP="CUR ADM OUR NOR STA NID"';

        ssl on;
        ssl_certificate      /etc/letsencrypt/live/test.stats.dash.org/cert.pem;
        ssl_certificate_key  /etc/letsencrypt/live/test.stats.dash.org/privkey.pem;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        # force https-redirects
        if ($scheme = http) {
              return 301 https://$server_name$request_uri;
        }

        location / {
            root   html;
            index  index.html index.htm;
        }

       location /hchk {
            root   html;
            return 200;
            index  index.html index.htm;
        }

        location = /api/v1/ticker {
                if ( $arg_callback ) {
                    echo_before_body '$arg_callback(';
                    echo_after_body ');';
                }        
                default_type text/javascript;
                set $redis_key 'TICKER:ticker_price';
                redis_pass 127.0.0.1:16379;
        }

        location = /data/v1/dashbtc/avg {
                if ( $arg_callback ) {
                    echo_before_body '$arg_callback(';
                    echo_after_body ');';
                }
                default_type text/javascript;
                set $redis_key 'HISTORY:key_dash_btc_avg_history';
                redis_pass 127.0.0.1:16379;
        }

        location = /data/v1/dashusd/avg {
                if ( $arg_callback ) {
                    echo_before_body '$arg_callback(';
                    echo_after_body ');';
                }
                default_type text/javascript;
                set $redis_key 'HISTORY:key_dash_usd_avg_history';
                redis_pass 127.0.0.1:16379;
        }

#        location /is {
#            default_type 'text/html';
#            content_by_lua_block {
#                ngx.say('<!DOCTYPE html>')
#                ngx.say('<html>')
#                ngx.say('    <head>')
#                ngx.say('        <meta charset="utf-8" />')
#                ngx.say('        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=0">')
#                ngx.say('        <title>dash testnet IstantSend pingpong</title>')
#                ngx.say('    </head>')
#                ngx.say('    <body>')
#                ngx.say('<pre>')
#                ngx.say('for dash testnet')
#                ngx.say('')
#                ngx.say('refund test')
#                ngx.say('zmq + rpc')
#                ngx.say('if received tDash <= 1 --> send 1')
#                ngx.say('if received tDash > 10 --> send 5 (thank you)')
#                ngx.say('if received tDash > 1 and <= 10 --> send same amount')
#
#                local redis = require "resty.redis"
#                local red = redis:new()
#
#                red:set_timeout(1000) -- 1 sec
#
#                local ok, err = red:connect("127.0.0.1", 16379)
#                if not ok then
#                    ngx.say("failed to connect: ", err)
#                    ngx.say('</pre>')
#                    ngx.say('    </body>')
#                    ngx.say('</html>')
#                    return
#                end
#
#                local issetuid = ngx.var.uid_got
#                if issetuid ~= nil then
#                    local chkqraddr, err = red:hget("DASHISPINGPONG:HA_ADDR_POOL", issetuid)
#                    if not chkqraddr then
#                        -- check
#                    end
#
#                    if chkqraddr == ngx.null then
#                        local chkres, err = red:spop("DASHISPINGPONG:S_NEW_ADDRS")
#                        red:init_pipeline()
#                        red:sadd("DASHISPINGPONG:S_USED_ADDRS", chkres)
#                        red:hmset("DASHISPINGPONG:HA_ADDR_POOL", issetuid, chkres)
#                        local chkresults, err = red:commit_pipeline()
#                        if not chkresults then
#                            ngx.say("failed to commit the pipelined requests: ", err)
#                            ngx.say('</pre>')
#                            ngx.say('    </body>')
#                            ngx.say('</html>')
#                            return
#                        end
#
#                    end
#                else 
#                    issetuid = ngx.var.uid_set
#                    local res, err = red:spop("DASHISPINGPONG:S_NEW_ADDRS")
#                    if not res then
#                        ngx.say("failed to get new addr: ", err)
#                        ngx.say('</pre>')
#                        ngx.say('    </body>')
#                        ngx.say('</html>')
#                        return
#                    end
#
#                    if res == ngx.null then
#                        ngx.say("no new addr in addr pool")
#                        ngx.say('</pre>')
#                        ngx.say('    </body>')
#                        ngx.say('</html>')
#                        return
#                    end
#
#                    ngx.say("new addr: ", res)
#
#                    red:init_pipeline()
#                    red:sadd("DASHISPINGPONG:S_USED_ADDRS", res)
#                    red:hmset("DASHISPINGPONG:HA_ADDR_POOL", issetuid, res)
#                    local results, err = red:commit_pipeline()
#                    if not results then
#                        ngx.say("failed to commit the pipelined requests: ", err)
#                        ngx.say('</pre>')
#                        ngx.say('    </body>')
#                        ngx.say('</html>')
#                        return
#                    end
#                end
#
#                local qraddr, err = red:hget("DASHISPINGPONG:HA_ADDR_POOL", issetuid)
#                if not qraddr then
#                    ngx.say("failed to get addr from hash pool: ", err)
#                    ngx.say('</pre>')
#                    ngx.say('    </body>')
#                    ngx.say('</html>')
#                    return
#                end
#
#                if qraddr == ngx.null then
#                    ngx.say("no match userid in hash pool")
#                    ngx.say('</pre>')
#                    ngx.say('    </body>')
#                    ngx.say('</html>')
#                    return
#                end                    
#
#                ngx.say("")
#                ngx.say("send tDash to ", qraddr)
#                ngx.say('</pre>')
#                ngx.say("<br><img src=\"/qr_with_con?dash:", qraddr, "?amount=0.01&IS=1\" height=\"316\" width=\"316\"><br>")
#                ngx.say("<br><img src=https://chart.googleapis.com/chart?chs=316x316&cht=qr&chl=dash:", qraddr, "?amount=0.01&IS=1><br>")
#                ngx.say('    </body>')
#                ngx.say('</html>')
#            }
#        }
#
#        location /qr_with_con {
#            qrcode_fg_color 000000;
#            qrcode_bg_color FFFFFF;
#            qrcode_level 2;
#            qrcode_hint 2;
#            qrcode_size 300;
#            qrcode_margin 10;
#            qrcode_version 4;
#            qrcode_txt $args;
#            qrcode_casesensitive 1; 
#            qrcode_gen;
#        }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    server {
        listen       587 ssl;
        server_name  test.stats.dash.org;

        access_log  logs/dashrpctest.access.log  main;
        error_log   logs/dashrpctest.error.log;

#        userid         on;
#        userid_name    uid;
#        userid_domain  test.stats.dash.org;
#        userid_path    /;
#        userid_expires max;
#        userid_p3p     'policyref="/w3c/p3p.xml", CP="CUR ADM OUR NOR STA NID"';

        ssl on;
        ssl_certificate      /etc/letsencrypt/live/test.stats.dash.org/cert.pem;
        ssl_certificate_key  /etc/letsencrypt/live/test.stats.dash.org/privkey.pem;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            set $jsonrpc_whitelist 'decoderawtransaction,getaddressbalance,getaddressutxos,getblockcount,getblockhash,getrawtransaction,listunspent,masternodebroadcast,masternodelist,getinfo,sendrawtransaction,validateaddress';
            access_by_lua_file 'dash-jsonrpc-access.lua';
            auth_basic "Restricted";
            auth_basic_user_file /usr/local/nginx/conf/.htpasswd;
            proxy_set_header Authorization "Basic xxxxxxxxx==";
            proxy_pass http://testnet;
        }

    }

    server {
        listen       8080 ssl;
        server_name  test.stats.dash.org;

        access_log  logs/dashrpcmain.access.log  main;
        error_log   logs/dashrpcmain.error.log;

#        userid         on;
#        userid_name    uid;
#        userid_domain  test.stats.dash.org;
#        userid_path    /;
#        userid_expires max;
#        userid_p3p     'policyref="/w3c/p3p.xml", CP="CUR ADM OUR NOR STA NID"';

        ssl on;
        ssl_certificate      /etc/letsencrypt/live/test.stats.dash.org/cert.pem;
        ssl_certificate_key  /etc/letsencrypt/live/test.stats.dash.org/privkey.pem;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            set $jsonrpc_whitelist 'decoderawtransaction,getaddressbalance,getaddressutxos,getblockcount,getblockhash,getrawtransaction,listunspent,masternodebroadcast,masternodelist,getinfo,sendrawtransaction,validateaddress';
            access_by_lua_file 'dash-jsonrpc-access.lua';
            auth_basic "Restricted";
            auth_basic_user_file /usr/local/nginx/conf/.htpasswd;
            proxy_set_header Authorization "Basic xxxxxxx==";
            proxy_pass http://mainnet;
        }

    }

}

# end

